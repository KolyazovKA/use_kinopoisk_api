movie-catalog/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MovieCard.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MovieList.jsx
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MovieDetails.jsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Pagination.jsx
‚îÇ   ‚îú‚îÄ‚îÄ App.jsx
‚îÇ   ‚îú‚îÄ‚îÄ index.js (–∏–ª–∏ main.jsx)
‚îÇ   ‚îî‚îÄ‚îÄ index.css
‚îú‚îÄ‚îÄ public/
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ package.json
‚îî‚îÄ‚îÄ README.md

// App.jsx
import { useState, useEffect, useRef } from 'react';
import { Header } from './components/Header';
import { MovieList } from './components/MovieList';
import { MovieDetails } from './components/MovieDetails';
import { Pagination } from './components/Pagination';

export default function App() {
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('avengers');
  const [selectedMovieId, setSelectedMovieId] = useState(null);
  const [favorites, setFavorites] = useState([]);
  const [showFavorites, setShowFavorites] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
  const [currentPage, setCurrentPage] = useState(1);
  const [totalResults, setTotalResults] = useState(0);
  const resultsPerPage = 10; // OMDB API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É

  // Ref –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const topRef = useRef(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const savedFavorites = localStorage.getItem('favorites');
    if (savedFavorites) {
      try {
        setFavorites(JSON.parse(savedFavorites));
      } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', e);
      }
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –≤ localStorage –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  useEffect(() => {
    localStorage.setItem('favorites', JSON.stringify(favorites));
  }, [favorites]);

  // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∏–ª—å–º—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (!showFavorites) {
      fetchMovies(searchTerm, currentPage);
    }
  }, [searchTerm, currentPage, showFavorites]);

  // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (topRef.current) {
      topRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [currentPage]);

  const fetchMovies = async (query, page) => {
    setLoading(true);
    try {
      const response = await fetch(`https://www.omdbapi.com/?s=${query}&page=${page}&apikey=b9a5e69d`);
      const data = await response.json();

      if (data.Response === "True") {
        setMovies(data.Search);
        setTotalResults(parseInt(data.totalResults));
        setError(null);
      } else {
        setMovies([]);
        setTotalResults(0);
        setError(data.Error);
      }
    } catch (err) {
      setError("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
      setMovies([]);
      setTotalResults(0);
    } finally {
      setLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const fetchFavoriteMovies = async () => {
    setLoading(true);
    try {
      const favoriteMoviesDetails = await Promise.all(
        favorites.map(async (movieId) => {
          const response = await fetch(`https://www.omdbapi.com/?i=${movieId}&apikey=b9a5e69d`);
          return response.json();
        })
      );

      setMovies(favoriteMoviesDetails.filter(movie => movie.Response === "True"));
      setError(null);
      setTotalResults(favoriteMoviesDetails.length);
    } catch (err) {
      setError("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤");
      setMovies([]);
      setTotalResults(0);
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (query) => {
    setSearchTerm(query);
    setCurrentPage(1); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞ –ø–µ—Ä–≤—É—é –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
    setShowFavorites(false);
  };

  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const handleViewDetails = (movieId) => {
    setSelectedMovieId(movieId);
  };

  const handleCloseDetails = () => {
    setSelectedMovieId(null);
  };

  const toggleFavorite = (movieId) => {
    if (favorites.includes(movieId)) {
      setFavorites(favorites.filter(id => id !== movieId));
    } else {
      setFavorites([...favorites, movieId]);
    }
  };

  const handleToggleFavorites = () => {
    if (showFavorites) {
      setShowFavorites(false);
    } else {
      setShowFavorites(true);
      fetchFavoriteMovies();
    }
  };

  const totalPages = Math.ceil(totalResults / resultsPerPage);

  return (
    <div className="container mx-auto p-4">
      <div ref={topRef}></div>
      <Header onSearch={handleSearch} />

      <div className="mb-6 flex justify-center">
        <button
          onClick={handleToggleFavorites}
          className={`px-4 py-2 rounded ${showFavorites
            ? 'bg-yellow-500 text-white'
            : 'bg-gray-200 text-gray-800'}`}
        >
          {showFavorites ? '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∏—Å–∫—É' : '–ü–æ–∫–∞–∑–∞—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ'}
        </button>
      </div>

      {loading ? (
        <div className="text-center py-12">
          <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
        </div>
      ) : error ? (
        <div className="text-center text-red-500 py-12">{error}</div>
      ) : movies.length > 0 ? (
        <>
          <MovieList
            movies={movies}
            onViewDetails={handleViewDetails}
            favorites={favorites}
            onToggleFavorite={toggleFavorite}
          />

          {!showFavorites && totalPages > 1 && (
            <Pagination
              currentPage={currentPage}
              totalPages={totalPages}
              onPageChange={handlePageChange}
            />
          )}
        </>
      ) : (
        <div className="text-center py-12">
          {showFavorites
            ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤'
            : '–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'}
        </div>
      )}

      {selectedMovieId && (
        <MovieDetails
          movieId={selectedMovieId}
          onClose={handleCloseDetails}
          isFavorite={favorites.includes(selectedMovieId)}
          onToggleFavorite={toggleFavorite}
        />
      )}
    </div>
  );
}

// components/Header.jsx
import React from 'react';

export function Header({ onSearch }) {
  const handleSubmit = (event) => {
    event.preventDefault();
    const formData = new FormData(event.target);
    const query = formData.get('query');
    if (query && query.trim().length > 0) {
      onSearch(query);
    }
  };

  return (
    <header className="mb-8">
      <h1 className="text-3xl font-bold text-center mb-6">–ö–∞—Ç–∞–ª–æ–≥ —Ñ–∏–ª—å–º–æ–≤</h1>
      <form onSubmit={handleSubmit} className="flex justify-center">
        <input
          type="text"
          name="query"
          placeholder="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤..."
          className="px-4 py-2 border rounded-l-lg w-64 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <button type="submit" className="bg-blue-500 text-white px-4 py-2 rounded-r-lg hover:bg-blue-600 transition">
          –ü–æ–∏—Å–∫
        </button>
      </form>
    </header>
  );
}

// components/MovieCard.jsx
import React from 'react';

export function MovieCard({ movie, onViewDetails, isFavorite, onToggleFavorite }) {
  return (
    <div className="border rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition">
      <div className="relative">
        <img
          src={movie.Poster !== "N/A" ? movie.Poster : "/api/placeholder/300/400"}
          alt={movie.Title}
          className="w-full h-64 object-cover"
        />
        <button
          onClick={(e) => {
            e.stopPropagation();
            onToggleFavorite(movie.imdbID);
          }}
          className="absolute top-2 right-2 w-8 h-8 flex items-center justify-center bg-white rounded-full shadow hover:bg-gray-100 transition"
          aria-label={isFavorite ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
        >
          {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
        </button>
      </div>
      <div className="p-4">
        <h2 className="font-bold text-lg mb-2 truncate">{movie.Title}</h2>
        <p className="text-gray-700">{movie.Year}</p>
        <button
          onClick={() => onViewDetails(movie.imdbID)}
          className="mt-4 bg-blue-500 text-white px-4 py-2 rounded w-full hover:bg-blue-600 transition"
        >
          –ü–æ–¥—Ä–æ–±–Ω–µ–µ
        </button>
      </div>
    </div>
  );
}

// components/MovieList.jsx
import React from 'react';
import { MovieCard } from './MovieCard';

export function MovieList({ movies, onViewDetails, favorites = [], onToggleFavorite }) {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {movies.map(movie => (
        <MovieCard
          key={movie.imdbID}
          movie={movie}
          onViewDetails={onViewDetails}
          isFavorite={favorites.includes(movie.imdbID)}
          onToggleFavorite={onToggleFavorite}
        />
      ))}
    </div>
  );
}

// components/MovieDetails.jsx
import React, { useState, useEffect } from 'react';

export function MovieDetails({ movieId, onClose, isFavorite, onToggleFavorite }) {
  const [movie, setMovie] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchMovieDetails = async () => {
      setLoading(true);
      try {
        const response = await fetch(`https://www.omdbapi.com/?i=${movieId}&plot=full&apikey=b9a5e69d`);
        const data = await response.json();

        if (data.Response === "True") {
          setMovie(data);
          setError(null);
        } else {
          setMovie(null);
          setError(data.Error);
        }
      } catch (err) {
        setError("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö");
        setMovie(null);
      } finally {
        setLoading(false);
      }
    };

    if (movieId) {
      fetchMovieDetails();
    }
  }, [movieId]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
  useEffect(() => {
    const handleEscapeKey = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscapeKey);
    return () => {
      document.removeEventListener('keydown', handleEscapeKey);
    };
  }, [onClose]);

  if (!movieId) return null;

  return (
    <div
      className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50"
      onClick={onClose}
    >
      <div
        className="bg-white rounded-lg max-w-2xl w-full max-h-screen overflow-y-auto"
        onClick={(e) => e.stopPropagation()}
      >
        {loading ? (
          <div className="text-center p-8">
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
            <p className="mt-2">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        ) : error ? (
          <div className="text-center text-red-500 p-8">{error}</div>
        ) : movie ? (
          <div className="p-6">
            <div className="flex justify-between items-start mb-4">
              <h2 className="text-2xl font-bold">{movie.Title}</h2>
              <div className="flex gap-2">
                <button
                  onClick={() => onToggleFavorite(movieId)}
                  className="text-2xl hover:scale-110 transition"
                  aria-label={isFavorite ? "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"}
                >
                  {isFavorite ? '‚ù§Ô∏è' : 'ü§ç'}
                </button>
                <button
                  onClick={onClose}
                  className="text-gray-500 hover:text-gray-700"
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                >
                  ‚úï
                </button>
              </div>
            </div>

            <div className="flex flex-col md:flex-row gap-6">
              <img
                src={movie.Poster !== "N/A" ? movie.Poster : "/api/placeholder/300/400"}
                alt={movie.Title}
                className="w-full md:w-1/3 object-cover rounded"
              />

              <div className="w-full md:w-2/3">
                <p className="mb-2"><strong>–ì–æ–¥:</strong> {movie.Year}</p>
                <p className="mb-2"><strong>–ñ–∞–Ω—Ä:</strong> {movie.Genre}</p>
                <p className="mb-2"><strong>–†–µ–∂–∏—Å—Å–µ—Ä:</strong> {movie.Director}</p>
                <p className="mb-2"><strong>–ê–∫—Ç–µ—Ä—ã:</strong> {movie.Actors}</p>
                <p className="mb-2"><strong>–†–µ–π—Ç–∏–Ω–≥ IMDB:</strong> {movie.imdbRating}</p>
                <p className="mb-4"><strong>–°—é–∂–µ—Ç:</strong> {movie.Plot}</p>

                {movie.Ratings && movie.Ratings.length > 0 && (
                  <div className="mt-4">
                    <h3 className="font-bold mb-2">–†–µ–π—Ç–∏–Ω–≥–∏:</h3>
                    <ul className="list-disc pl-5">
                      {movie.Ratings.map((rating, index) => (
                        <li key={index}>
                          {rating.Source}: {rating.Value}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="text-center p-8">–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
        )}
      </div>
    </div>
  );
}

// components/Pagination.jsx
import React from 'react';

export function Pagination({ currentPage, totalPages, onPageChange }) {
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getPageNumbers = () => {
    const pages = [];
    const maxVisiblePages = 5;

    if (totalPages <= maxVisiblePages) {
      // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –º–∞–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ
      for (let i = 1; i <= totalPages; i++) {
        pages.push(i);
      }
    } else {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é, –ø–æ—Å–ª–µ–¥–Ω—é—é –∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π
      if (currentPage <= 3) {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–∏–∂–µ –∫ –Ω–∞—á–∞–ª—É
        for (let i = 1; i <= 4; i++) {
          pages.push(i);
        }
        pages.push('...');
        pages.push(totalPages);
      } else if (currentPage >= totalPages - 2) {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É
        pages.push(1);
        pages.push('...');
        for (let i = totalPages - 3; i <= totalPages; i++) {
          pages.push(i);
        }
      } else {
        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–¥–µ-—Ç–æ –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ
        pages.push(1);
        pages.push('...');
        pages.push(currentPage - 1);
        pages.push(currentPage);
        pages.push(currentPage + 1);
        pages.push('...');
        pages.push(totalPages);
      }
    }

    return pages;
  };

  const pageNumbers = getPageNumbers();

  return (
    <div className="flex justify-center mt-8">
      <button
        onClick={() => onPageChange(currentPage - 1)}
        disabled={currentPage === 1}
        className={`px-3 py-1 mx-1 rounded ${
          currentPage === 1
            ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
            : 'bg-blue-500 text-white hover:bg-blue-600 transition'
        }`}
        aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
      >
        &laquo;
      </button>

      {pageNumbers.map((pageNumber, index) => (
        <button
          key={index}
          onClick={() => {
            if (pageNumber !== '...') {
              onPageChange(pageNumber);
            }
          }}
          className={`px-3 py-1 mx-1 rounded ${
            pageNumber === currentPage
              ? 'bg-blue-700 text-white'
              : pageNumber === '...'
                ? 'bg-gray-100 text-gray-600 cursor-default'
                : 'bg-blue-500 text-white hover:bg-blue-600 transition'
          }`}
          aria-label={pageNumber === '...' ? "–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã" : `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNumber}`}
        >
          {pageNumber}
        </button>
      ))}

      <button
        onClick={() => onPageChange(currentPage + 1)}
        disabled={currentPage === totalPages}
        className={`px-3 py-1 mx-1 rounded ${
          currentPage === totalPages
            ? 'bg-gray-200 text-gray-500 cursor-not-allowed'
            : 'bg-blue-500 text-white hover:bg-blue-600 transition'
        }`}
        aria-label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
      >
        &raquo;
      </button>
    </div>
  );
}

// index.js –∏–ª–∏ main.jsx (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// index.css (–±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏, –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏—Ö —Å–≤–æ–∏–º–∏)
@tailwind base;

@tailwind components;

@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
  margin: 0;
  padding: 0;
  min-height: 100vh;
  background-color: #f5f7fa;
}

/* –°—Ç–∏–ª–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ */
.fade-enter {
  opacity: 0;
}
.fade-enter-active {
  opacity: 1;
  transition: opacity 300ms;
}
.fade-exit {
  opacity: 1;
}
.fade-exit-active {
  opacity: 0;
  transition: opacity 300ms;
}